{% if page.mermaid and page.mermaid.enabled %}
  <script
    defer
<<<<<<< HEAD
    src="{{ site.third_party_libraries.mermaid.url.js }}"
    integrity="{{ site.third_party_libraries.mermaid.integrity.js }}"
=======
    src="https://cdn.jsdelivr.net/npm/mermaid@{{ site.mermaid.version }}/dist/mermaid.min.js"
    integrity="{{ site.mermaid.integrity }}"
>>>>>>> b0b77b84 (Initial commit)
    crossorigin="anonymous"
  ></script>
  {% if page.mermaid.zoomable %}
    <script
      defer
<<<<<<< HEAD
      src="{{ site.third_party_libraries.d3.url.js }}"
      integrity="{{ site.third_party_libraries.d3.integrity.js }}"
=======
      src="https://cdn.jsdelivr.net/npm/d3@{{ site.d3.version }}/dist/d3.min.js"
      integrity="{{ site.d3.integrity }}"
>>>>>>> b0b77b84 (Initial commit)
      crossorigin="anonymous"
    ></script>
  {% endif %}
  <script>
<<<<<<< HEAD
    let mermaidTheme = determineComputedTheme();

    /* Create mermaid diagram as another node and hide the code block, appending the mermaid node after it
       this is done to enable retrieving the code again when changing theme between light/dark */
    document.addEventListener('readystatechange', () => {
=======
    let theme = localStorage.getItem('theme');

    /* Create mermaid diagram as another node and hide the code block, appending the mermaid node after it
       this is done to enable retrieving the code again when changing theme between light/dark */
    document.onreadystatechange = () => {
>>>>>>> b0b77b84 (Initial commit)
      if (document.readyState === 'complete') {
        document.querySelectorAll('pre>code.language-mermaid').forEach((elem) => {
          const svgCode = elem.textContent;
          const backup = elem.parentElement;
          backup.classList.add('unloaded');
          /* create mermaid node */
          let mermaid = document.createElement('pre');
          mermaid.classList.add('mermaid');
          const text = document.createTextNode(svgCode);
          mermaid.appendChild(text);
          backup.after(mermaid);
        });

<<<<<<< HEAD
        mermaid.initialize({ theme: mermaidTheme });
=======
        mermaid.initialize({ theme: theme });
>>>>>>> b0b77b84 (Initial commit)

        /* Zoomable mermaid diagrams */
        if (typeof d3 !== 'undefined') {
          window.addEventListener('load', function () {
            var svgs = d3.selectAll('.mermaid svg');
            svgs.each(function () {
              var svg = d3.select(this);
              svg.html('<g>' + svg.html() + '</g>');
              var inner = svg.select('g');
              var zoom = d3.zoom().on('zoom', function (event) {
                inner.attr('transform', event.transform);
              });
              svg.call(zoom);
            });
          });
        }
      }
<<<<<<< HEAD
    });
=======
    };
>>>>>>> b0b77b84 (Initial commit)
  </script>
{% endif %}
